Require Import
  Hask.Control.Monad
  Hask.Control.Monad.Trans.State
  Pact.Data.Either
  Pact.Data.IList
  Pact.Lib
  Pact.Ty
  Pact.Bltn
  Pact.Exp
  Pact.Value
  Pact.SemTy
  Pact.Lang
  Pact.Lang.CapabilityType
  Pact.Lang.Capability
  Pact.SemBltn.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.

Set Equations With UIP.

Generalizable All Variables.
Set Primitive Projections.

Import ListNotations.

(* The ZK theorem

   Given:

   - a type of ZK proofs
   - a ZK "circuit" built from some function 'f'
   - known argument 'x'
   - unknown argument 'w'
   - and some result 'y'

   then a proof witness generated by this circuit implies a proof of the
   statement:

     ∃ w, f x w = y

   In cases where only 'x' is known and 'y' is needed, this permits the
   removal of 'w' from the problem statement, since we only need the
   witness 'zk_circuit f x y' to know that '∃ w, f x w = y'.
*)
Theorem zk_theorem :
  ∃ (zk_proof : ∀ (a b c : Type) (f : a → b → c), Type)
    (zk_circuit : ∀ {a b c : Type} (f : a → b → c), a → c → zk_proof a b c f),
  ∀ {a b c : Type}
    (f : a → b → c)
    (x : a)
    (y : c),
    zk_proof a b c f → ∃ w : b, f x w = y.
